#!/bin/bash
set -euo pipefail

. /usr/share/flatcar/release
. /usr/share/flatcar/update.conf
. /usr/share/flatcar/gasket-metadata
[ -f /etc/flatcar/gasket-metadata ] && . /etc/flatcar/gasket-metadata
    
GASKET_WORKDIR="gasket-${GASKET_BRANCH}-workdir"

FLATCAR_DEVELOPER_CONTAINER="flatcar_developer_container-${FLATCAR_RELEASE_VERSION}.bin"
FLATCAR_DEVELOPER_CONTAINER_URL=""
FLATCAR_ROOT_WORKDIR="/opt/gasket/workdir"
FLATCAR_KERNEL_VERSION=$(uname -r)
GASKET_FLATCAR_VERSION_PAIR="${GASKET_BRANCH}/${FLATCAR_KERNEL_VERSION}"
GASKET_CURRENT_INSTALLATION="current"

function download_flatcar_developer_container() {
  echo Downloading Flatcar Container Linux Developer Container for version: "${FLATCAR_RELEASE_VERSION}"

  if [[ ! -f "${FLATCAR_ROOT_WORKDIR}/${FLATCAR_DEVELOPER_CONTAINER}" ]]
  then
    rm -f "${FLATCAR_ROOT_WORKDIR}/"flatcar_developer_container*.bin
    FLATCAR_REMOTE_FILENAME=${FLATCAR_DEVELOPER_CONTAINER%%-*}.bin.bz2
    if [[ "$(curl -I --retry-delay 1 --retry 60 --retry-connrefused --retry-max-time 60 --connect-timeout 20 -L -s -o /dev/null -w "%{http_code}" "https://${GROUP}.release.flatcar-linux.net/${FLATCAR_RELEASE_BOARD}/${FLATCAR_RELEASE_VERSION}/${FLATCAR_REMOTE_FILENAME}")" == 200 ]]
    then
      FLATCAR_DEVELOPER_CONTAINER_URL="https://${GROUP}.release.flatcar-linux.net/${FLATCAR_RELEASE_BOARD}/${FLATCAR_RELEASE_VERSION}/${FLATCAR_REMOTE_FILENAME}"
    else
      FLATCAR_RELEASE_BOARD=${FLATCAR_RELEASE_BOARD//-usr/}
      FLATCAR_DEVELOPER_CONTAINER_URL="https://bincache.flatcar-linux.net/images/${FLATCAR_RELEASE_BOARD}/${FLATCAR_RELEASE_VERSION}/${FLATCAR_REMOTE_FILENAME}"
    fi

    if [ ! -n "${FLATCAR_DEVELOPER_CONTAINER_URL}" ]
    then
      return 1
    fi

    curl -L --fail "${FLATCAR_DEVELOPER_CONTAINER_URL}" -o "${FLATCAR_ROOT_WORKDIR}/${FLATCAR_DEVELOPER_CONTAINER}.bz2"
    lbzip2 -d "${FLATCAR_ROOT_WORKDIR}/${FLATCAR_DEVELOPER_CONTAINER}.bz2"

  fi

  return 0
}

function clone_gasket_driver() {
  echo Cloning GASKET Driver from repository "${GASKET_REPOSITORY} at branch ${GASKET_BRANCH}"

  if [ ! -d "${FLATCAR_ROOT_WORKDIR}/${GASKET_WORKDIR}/.git" ]
  then
    git clone --depth 1 --branch "${GASKET_BRANCH}" "${GASKET_REPOSITORY}" "${FLATCAR_ROOT_WORKDIR}/${GASKET_WORKDIR}" 
  fi
}

function run_nspawn_container() {
  echo Spawn system-nspawn container to install the GASKET drivers

  sudo systemd-nspawn --read-only \
                      --volatile=overlay \
                      --image="${FLATCAR_ROOT_WORKDIR}/${FLATCAR_DEVELOPER_CONTAINER}" \
                      --bind="${FLATCAR_ROOT_WORKDIR}/${GASKET_WORKDIR}":/gasket \
                      --bind=/usr/lib/gasket/bin:/app/bin/ \
                      /app/bin/install-gasket
}

function copy_gasket_build_artifacts() {
  mkdir -p "/opt/gasket/${GASKET_FLATCAR_VERSION_PAIR}/usr/lib/modules/$(uname -r)/gasket/"
  cp "$FLATCAR_ROOT_WORKDIR/$GASKET_WORKDIR/install-mod"/*.ko "/opt/gasket/${GASKET_FLATCAR_VERSION_PAIR}/usr/lib/modules/$(uname -r)/gasket/"
  cp "$FLATCAR_ROOT_WORKDIR/$GASKET_WORKDIR/install-mod"/modules.* "/opt/gasket/${GASKET_FLATCAR_VERSION_PAIR}/usr/lib/modules/$(uname -r)/"

  mkdir -p "/opt/gasket/${GASKET_FLATCAR_VERSION_PAIR}/usr/lib/extension-release.d/"
  cat <<EOF >"/opt/gasket/${GASKET_FLATCAR_VERSION_PAIR}/usr/lib/extension-release.d/extension-release.gasket-driver"
ID=flatcar
SYSEXT_LEVEL=1.0
EOF

  pushd /opt/gasket
  ln -sfn "${GASKET_FLATCAR_VERSION_PAIR}" current
  popd
}


function install_and_load() {
  # This creates symlinks to sonames
  mkdir -p /etc/ld.so.conf.d/
  echo "/opt/gasket/${GASKET_CURRENT_INSTALLATION}/usr/lib" > /etc/ld.so.conf.d/gasket.conf
  ldconfig

  pushd "/opt/gasket/${GASKET_CURRENT_INSTALLATION}/usr/lib/modules/$(uname -r)/gasket/"
  insmod gasket.ko
  insmod apex.ko
  popd
}

function verify_installation() {
  gasketVersion=$(modinfo gasket --field=version)
  if [ -z "${gasketVersion}" ]
  then
    echo "Gasket module not loaded!"
    exit 1
  else
    echo "Gasket module loaded with version: ${gasketVersion}"
  fi
  apexVersion=$(modinfo apex --field=version)
  if [ -z "${apexVersion}" ]
  then
    echo "Apex module not loaded!"
    exit 1
  else
    echo "Apex module loaded with version: ${apexVersion}"
  fi
}

function is_gasket_probe_required() {
  # Vendor: Global Unichip Corp., Class: Coral Edge TPU
  if [[ -n "$(lspci -d 1ac1:089a)" ]]; then
    return 0
  fi
  return 1
}

function is_gasket_installation_required() {
  if ! is_gasket_probe_required; then
    return 1
  fi

  if [[ -d "/opt/gasket/${GASKET_FLATCAR_VERSION_PAIR}" ]]; then
    return 1
  fi
}


function presetup() {
  mkdir -p "${FLATCAR_ROOT_WORKDIR}"
  mkdir -p "${FLATCAR_ROOT_WORKDIR}/${GASKET_WORKDIR}"
}


function setup() {
  download_flatcar_developer_container
  clone_gasket_driver
  run_nspawn_container
  copy_gasket_build_artifacts
  install_and_load
  verify_installation
}

if is_gasket_installation_required
then
  presetup "$@"
  setup "$@"
  exit 0
fi
if is_gasket_probe_required
then
  install_and_load
  verify_installation
fi
